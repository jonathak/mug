(-main)
(exit
)
(exit)
(-main)
(require 'mug.cli :reload)
.l
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(require 'mug.cli :reload)
(-main)
(re-pattern "pharm")
(def q "hug")
(re-pattern q)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(re-matches #"pharm" "Pharmaceutical sd")
(re-matches #"Pharm" "Pharmaceutical sd")
#"bob"
(re-find #"Pharm" "Pharmaceutical sd")
(re-find #"pharm" "Pharmaceutical sd")
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
.si Pharm
(-main)
(def q (re-pattern 
                                    (str "(?i) " (second (str/split cmd #" +")))))
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(util/get-mktcap 'mrk)
(util/marketcap+ 'mrk)
(app/marketcap+ 'mrk)
(require 'mug.util :reload)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(require 'mug.util :reload)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(p 'mrk)
(defn q [t] (memoize p))
(q 'mrk)
p
(p 'mrk)
(q 'mrk)
(defn f [x] (+ x 3))
(f 5)
(defn ff (memoize f))
(def ff (memoize f))
(ff 7)
(exit)
(p 'mrk)
(-main)
(exit)
(mkt 'mrk)
(mkt 'fbio)
(-main)
(exit)
(-main)
(reduce #(str % %2) '(6 7 8))
(reduce #(str % %2) '(6 7))
(reduce #(str % %2) '(6))
(reduce #(str % %2) '())
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
.m c r v
(exit)
(-main)
(exit)
(-main)
(require 'mug.cli :reload)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.util :reload)
(-main)
(exit)
(-main)
(zipcode 'gnc)
(-main)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(def q ".kiuyg")
(first q)
(= (first q) \.)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.help :reload)
(-main)
(try 0)
(try nil)
(try (/ 9 0))
(try (/ 9 0) (finally 8))
(try (/ 9 0) (catch ArithmeticException e 7))
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(-main)
@*from*
(type @*from*)
(= (type @*from*) mug.cli$top)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.help :reload)
(-main)
(require 'mug.help :reload)
@*from*
(@*from*)
(type @*from*)
(require 'mug.help :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.util :reload)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(require 'mug.help :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(exit)
(-main)
(exit)
(v 'mrk)
(dir mug.alpaca)
(-main)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.help :reload)
(-main)
(vs 'mrk)
(mug.core/vs 'mrk)
(exit)
(-main)
(vs 'mrk)
(c 'mrk)
(source c)
(source vs)
(app/volume-spikes 'mrk)
(vs 'mrk)
(exit)
(vs 'mrk)
(-help)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.core :reload)
(-main)
(require 'mug.core :reload)
(-main)
(fv "68758765")
(app/volume-spikes 'rnn)
(def q (app/volume-spikes 'rnn))
q
(require 'mug.core :reload)
(vs 'rnn)
(require 'mug.core :reload)
(vs 'rnn)
(require 'mug.core :reload)
(vs 'rnn)
(require 'mug.core :reload)
(vs 'rnn)
(require 'mug.core :reload)
(vs 'rnn)
(-main)
(require 'mug.app :reload)
(-main)
(exit)
mkr v
(v 'mrk)
(vs 'mrk)
(vol 'mrk)
(dir mug.app)
(app/volume-spikes 'mrk)
(app/volume-spikes 'rnn)
(slurp "resources/RNN_a_1D?.p")
(def raw (slurp "resources/RNN_a_1D?.p"))
(source raw)
raw
(str/split raw "\n")
(str/split raw #"\n")
(map last (str/split raw #"\n"))
raw
(def l (str/split raw #"\n"))
l
(def ll (map last l))
ll
l
(def ll (map #(str/split % #" ") l))
ll
(def lll (map last l))
lll
ll
(def lll (map last ll))
lll
(def llll (map read-string lll))
llll
(def lllll (sort llll))
lllll
(take 5 (reverse lllll))
(require 'mug.app :reload)
(app/volume-spikes 'rnn)
(require 'mug.app :reload)
(app/volume-spikes 'rnn)
(require 'mug.app :reload)
(app/volume-spikes 'rnn)
(require 'mug.app :reload)
(app/volume-spikes 'rnn)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(first (app/volume-spikes 'rnn))
(require 'mug.app :reload)
(app/volume-spikes 'rnn)
(require 'mug.app :reload)
(app/volume-spikes 'rnn)
(require 'mug.core :reload)
(-main)
(.toString (java.util.Date.))
(-main)
(exit)
(def q "123456789")
q
(str/subs q -3)
(subs q -3)
(subs q 3)
(count q)
(subs q (- (count q) 4))
(subs q 0 3)
(subs q 1 3)
(subs q 2 2)
(subs q 2 3)
(require 'mug.app :reload)
(mov 'mrk)
(require 'mug.app :reload)
(mov 'mrk)
(source year)
(source year?)
(source mug.app/year?)
(def p (fn [s] (-> s (str/split #" ") (second) (reverse) (subs 0 4) (reverse))))
(def fq (fn [s] (-> s (str/split #" ") (second) (reverse) (subs 0 4) (reverse))))
(def q "-1194 Thu_Sep_24_00_00_00_EDT_2015 1443067200 50.53 50.86 50.22 50.59 8920730 -0.009895169981385236")
(fq q)
(fq (str/split q #" "))
fq
q
(str/split q #" ")
(-> (str/split q #" ") (second))
(-> (str/split q #" ") (second) (reverse))
(-> (str/split q #" ") (second) (reverse) (subs 0 4))
(-> (str/split q #" ") (second) (reverse) (str) (subs 0 4))
(-> (str/split q #" ") (second) (reverse) ((fn [[a b c d & e]] (str d c b a))))
(require 'mug.app :reload)
(mov 'mrk)
(def fq (fn [s] (-> s (str/split #" ") (second) (reverse) ((fn [[a b c d & e]] (str d c b a))) )))
(fq q)
(require 'mug.app :reload)
(mov 'mrk)
(fq q)
(= "2018")
(= "2018" (fq q))
((fn [s] (or (= s "2019") (= s "2018"))) (fq q))
(exit)
(mov 'mrk)
(mov 'rnn)
(-main)
(require 'mug.app :reload)
(-main)
(exit)
(-main)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(mov 'mrk)
.q
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(require 'mug.app :reload)
(mov 'mrk)
(mvs 'mrk)
(vs 'mrk)
(app/top-volume-spike 'mrk)
(mug.app/top-volume-spike 'mrk)
(dir 'mug.app)
(dir mug.app)
(mug.app/top-volume-spik 'mrk)
(mug.app/top-volume-spike 'mrk)
(require 'mug.app :reload)
(mug.app/top-volume-spike 'mrk)
(require 'mug.app :reload)
(mug.app/top-volume-spike 'mrk)
(require 'mug.app :reload)
(mug.app/top-volume-spike 'mrk)
(require 'mug.app :reload)
(mug.app/top-volume-spike 'mrk)
(require 'mug.app :reload)
(mug.app/top-volume-spike 'mrk)
(require 'mug.app :reload)
(mug.app/top-volume-spike 'mrk)
(require 'mug.app :reload)
(mug.app/top-volume-spike 'mrk)
(require 'mug.app :reload)
(mug.app/top-volume-spike 'mrk)
(require 'mug.app :reload)
(mug.app/top-volume-spike 'mrk)
(require 'mug.app :reload)
(mug.app/top-volume-spike 'mrk)
(require 'mug.app :reload)
(mug.app/top-volume-spike 'mrk)
(require 'mug.app :reload)
(mug.app/top-volume-spike 'mrk)
(require 'mug.app :reload)
(require 'mug.core :reload)
(-main)
(tvs 'mrk)
(require 'mug.app :reload)
(require 'mug.core :reload)
(-main)
(exit)
(-main)
(tvs 'mrk)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.history :reload)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.app :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.app :reload)
(-main)
(require 'mug.app :reload)
(-main)
(require 'mug.app :reload)
(-main)
(require 'mug.app :reload)
(-main)
(require 'mug.app :reload)
(-main)
(require 'mug.app :reload)
(-main)
(require 'mug.app :reload)
(-main)
(require 'mug.app :reload)
(-main)
(require 'mug.app :reload)
(-main)
(require 'mug.app :reload)
(-main)
(require 'mug.app :reload)
(-main)
(require 'mug.core :reload)
(-main)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(exit)
