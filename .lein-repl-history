(source sku)
(sku 'MRK)
(sku "MRK")
(require 'mug.cli :reload)
(sku 'mrk)
.u
(sku 'mrk)
(require 'mug.cli :reload)
(sku 'mrk)
(require 'mug.cli :reload)
(sku 'mrk)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(exit)
(-main)
(exit)
(w 56 67)
(wh 56 67)
(-main)
(exit)
(-main)
.doc
.u
(-main)
(exit)
(-main)
(mkt 'acor)
(source mkt)
(app/market+ t)
(app/marketcap+ t)
(app/marketcap+ 'acor)
(app/marketcap! 'acor)
(source app/marketcap+)
(util/advstat-helper+ 'acor "jhfgsd")
(util/advstat-helper+  'ACOR "n")
(util/advstat-helper+  'ACOR "marketcap")
(exit)
(util/advstat-helper+  'ACOR "marketcap")
(exit)
(util/keystats! 'mrk)
(require 'mug.util :reload)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(util/get-mktcap 'ba)
(biomktcaps)
(require 'mug.fixtures :reload)
(mug.fixtures/biomktcap)
(mug.fixtures/biomktcaps)
(str/split (mug.fixtures/biomktcaps) #"\n")
(map #(first (str/split % #" ")) (str/split (mug.fixtures/biomktcaps) #"\n"))
(require 'mug.util :reload)
(util/refresh-fixture)
(require 'mug.util :reload)
(util/refresh-fixture)
(require 'mug.util :reload)
(util/refresh-fixture)
(util/freshnup)
(require 'mug.util :reload)
(util/freshnup)
(require 'mug.util :reload)
(util/freshnup)
(require 'mug.util :reload)
(util/freshnup)
(require 'mug.util :reload)
(util/freshnup)
(require 'mug.util :reload)
(util/freshnup)
(require 'mug.util :reload)
(util/freshnup)
(require 'mug.util :reload)
(dir mug.util)
(biomktcapsorted)
(util/biomktcapsorted)
(dir mug.util)
(iex-symbols)
(iex-symbols!)
(util/iex-symbols!)
(dir mug.util)
(industry 'mrk)
(dir mug.core)
(i 'mrk)
(map i (iex-symbols!))
(map i (util/iex-symbols!))
(count (util/iex-symbols!))
(count (filter #(= (i %) "Biotechnology") (util/iex-symbols!)))
(set (map i (util/iex-symbols!)))
(app/industries)
(exit)
(-main)
(industries)
(i 'mrk)
(i 'rnn)
(s 'mrk)
(-main)
(exit)
(-main)
pwd
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(app/industries)
(require 'mug.cli :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(first "jhf")
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(def q "Computer Process Hardware")
q
(-> (str/split q #" +"))
(->> (str/split q #" +") #(reduce (str (first %) (first %2))))
(->> (str/split q #" +") #(reduce (str (first %) (first %2))) (println))
(->> (str/split q #" +") (reduce #(str (first %) (first %2))))
(->> (str/split q #" +") (map first))
(->> (str/split q #" +") (map first) (reduce str))
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
i-a
(type i-a)
(first i-a)
(type (first i-a))
(require 'mug.cli :reload)
(i-a)
i-a
(print i-a)
(type i-a)
(count i-a)
(require 'mug.cli :reload)
(count i-a)
(require 'mug.cli :reload)
i-a
(require 'mug.cli :reload)
i-a
(count i-a)
(require 'mug.cli :reload)
(count i-a)
(second i-a)
(require 'mug.cli :reload)
(second i-a)
(str/split (second i-a))
(str/split (second i-a) #"\t")
(require 'mug.cli :reload)
(second i-a)
(require 'mug.cli :reload)
(second i-a)
(require 'mug.cli :reload)
(second i-a)
(i-a 'MRK)
(i-a 'AC)
(get i-a 'AC)
(require 'mug.cli :reload)
(industry? 'ac)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(def q (slurp "resources/industry-abbreviations.txt"))
q
(print q)
(def z (str/replace q #"\r" "\n"))
z
(print z)
(source spit)
(spit "resources/industry-abbreviations.txt" z)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(iex-symbols)
(iex-symbols!)
(util/iex-symbols!)
(def q (util/iex-symbols!))
q
(i 'IBM)
(map (fn [x] [x (i x)]) q)
(def z (map (fn [x] [x (i x)]) q))
z
(map (fn [[a b]] (str a " " b "\n")) z)
(def k (map (fn [[a b]] (str a " " b "\n")) z))
k
(reduce str k)
(spit "resources/industry-by-ticker.txt" (reduce str k))
(require 'mug.cli :reload)
(-main)
(industry? 'all)
(industry? 'aal)
(industry? 'AAL)
industries
(industries)
(industry? 'AIR)
(canme 'ba)
(cname 'ba)
(cname 'aa)
(.sl Delta)
(sl 'Delta)
(i 'dal)
(industry-tickers 'AIR)
(require 'mug.cli :reload)
(industry-tickers 'AIR)
(require 'mug.cli :reload)
(industry-tickers 'AIR)
(i 'dal)
(util/iex-symbols!)
(cname 'dal)
(i 'dal)
(industry? 'AIR)
(require 'mug.cli :reload)
(industry-tickers 'AIR)
(-main)
(exit)
(-main)
(exit)
(-main)
(require 'mug.cli :reload)
(-main)
(industry-tickers 'AIR)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(source add-industry)
(add-industry ".ai AIR"
)
(require 'mug.cli :reload)
(add-industry ".ai AIR")
(require 'mug.cli :reload)
(add-industry ".ai AIR")
@*industry*
@*inventory*
(-main)
@*inventory*
(swap! *inventory* (fn [x] (assoc x ['DAL 80345985]))
)
(swap! *inventory* (fn [x] (conj x ['DAL 987698])))
@*inventory*
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(require 'mug.cli :reload)
(-main)
(util/iex-symbols!)
(spit "crap" (util/iex-symbols!))
(spit "crap" (reduce (fn [a b] (str a "\n" b)) (util/iex-symbols!)))
(require 'mug.cli :reload)
industry-tickers
industry-tickers!
(industry-tickers)
(industry-tickers 'AIR)
(industry-tickers! 'AIR)
(require 'mug.cli :reload)
(industry-tickers 'AIR)
(industry-tickers! 'AIR)
(-main)
(exit
)
(exit)
(-main)
(require 'mug.cli :reload)
.l
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(require 'mug.cli :reload)
(-main)
(re-pattern "pharm")
(def q "hug")
(re-pattern q)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(re-matches #"pharm" "Pharmaceutical sd")
(re-matches #"Pharm" "Pharmaceutical sd")
#"bob"
(re-find #"Pharm" "Pharmaceutical sd")
(re-find #"pharm" "Pharmaceutical sd")
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
.si Pharm
(-main)
(def q (re-pattern 
                                    (str "(?i) " (second (str/split cmd #" +")))))
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(util/get-mktcap 'mrk)
(util/marketcap+ 'mrk)
(app/marketcap+ 'mrk)
(require 'mug.util :reload)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(require 'mug.util :reload)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(p 'mrk)
(defn q [t] (memoize p))
(q 'mrk)
p
(p 'mrk)
(q 'mrk)
(defn f [x] (+ x 3))
(f 5)
(defn ff (memoize f))
(def ff (memoize f))
(ff 7)
(exit)
(p 'mrk)
(-main)
(exit)
(mkt 'mrk)
(mkt 'fbio)
(-main)
(exit)
(-main)
(reduce #(str % %2) '(6 7 8))
(reduce #(str % %2) '(6 7))
(reduce #(str % %2) '(6))
(reduce #(str % %2) '())
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
.m c r v
(exit)
(-main)
(exit)
(-main)
(require 'mug.cli :reload)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.util :reload)
(-main)
(exit)
(-main)
(zipcode 'gnc)
(-main)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(def q ".kiuyg")
(first q)
(= (first q) \.)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.help :reload)
(-main)
(try 0)
(try nil)
(try (/ 9 0))
(try (/ 9 0) (finally 8))
(try (/ 9 0) (catch ArithmeticException e 7))
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(-main)
@*from*
(type @*from*)
(= (type @*from*) mug.cli$top)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.help :reload)
(-main)
(require 'mug.help :reload)
@*from*
(@*from*)
(type @*from*)
(require 'mug.help :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.util :reload)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(require 'mug.help :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(exit)
(-main)
(exit)
