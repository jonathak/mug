(require 'mug.cli :reload)
(-main)
@*history*
(require 'mug.cli :reload)
(-main)
@*history*
(peek @*history*)
(bag)
(-main)
(require 'mug.cli :reload)
(bag)
(require 'mug.cli :reload)
(bag)
(peek @*history*)
(top)
(exit)
(-main)
\
\\
(-main)
@*prior*
(str "" ".w 67 78)
(str "" ".w 56 67")
@*history*
@*prior*
(require 'mug.cli :reload)
(-main)
.m tvs mkt
(-main)
(require 'mug.help :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(silent-sort)
(sort-table)
(def q sort-table)
q
(q)
(def y silent-sort)
(y)
(type (y))
(type y)
(type (y))
(y)
(q)
(type q)
(type (q))
(require 'mug.cli :reload)
(silent-sort)
(-main)
(println [6 7 8])
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(silent-sort)
(@*bag-buffer*)
@*bag-buffer*
(require 'mug.cli :reload)
(-main)
(type 7)
(require 'mug.cli :reload)
.w 45 56
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(source keep-top)
@*bag-buffer*
(type @*bag-buffer)
(type @*bag-buffer*)
.l
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
.l
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
@*bag-buffer*
@*inventory*
(require 'mug.cli :reload)
(-main)
(second @*bag-buffer*)
(str/split (second @*bag-buffer*) #"\t")
(first (str/split (second @*bag-buffer*) #"\t"))
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(exit)
(-main)
@*bag-buffer*
(bag)
@*bag-buffer*
.q
(exit)
(-main)
(exit)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
@*history*
(require 'mug.cli :reload)
(-main)
@*prior*
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(/ 1 0)
(try (/ 1 0) (finally 0))
(try (/ 1 0) (catch ArithmeticException e 0))
(require mug.cli :reload)
(try 6)
(require mug.cli :reload)
(exit)
(-main)
(require mug.cli :reload)
(-main)
(require mug.cli :reload)
(c 'mrk)
(fgh 'mrk)
(c 'mrk)
(kh 'mrk)
(type c)
(type fjhghk)
(function? c)
(clojure.test/function? c)
(clojure.test/function? jhg)
(clojure.test/fn? jhg)
(exit)
(-main)
(util/in? [ 7 8 9] 8)
(util/in? [ 7 8 9] 88)
(require mug.cli :reload)
(def function? (fn [s] 
                                 (util/in? 
                                   ["emp" "so" "pf" "v" "b" "mkt" "c" "d" "r" "g" "e" "d2e" "cc" "mov" "mvs" "vs" "tvs" "web" "i" "s" "ceo" "cff" "zc"] 
                                   s)))
(function? "c")
(function? "khgfj")
(require mug.cli :reload)
(exit)
(-main)
(require mug.cli :reload)
(exit)
(-main)
(require mug.cli :reload)
(exit)
(-main)
(require mug.cli :reload)
(exit)
(-main)
(exit)
(-main)
(require mug.app :reload)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(cff 'mrk)
(cff 'ibm)
(cff 'argx)
(util/cash-flow+ 'mrk)
(util/cash-flow+ 'argx)
(util/raw-to-clojure (util/cash-flow+ 'argx))
( 'cashflow (util/raw-to-clojure (util/cash-flow+ 'argx)))
(= [] ('cashflow (util/raw-to-clojure (util/cash-flow+ 'argx))))
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(exit)
(-main)
(def date (java.util.Date))
(def date (java.util.Date.))
date
(type date)
(doc java.util.Date)
(java-doc java.util.Date)
(help)
help
(dir
)
(find-doc "java.util.Date")
(exit)
java.util.Date
(new java.util.Date)
(java.util.Date.)
(type (java.util.Date.))
(.getTime (java.util.Date.))
(/ (.getTime (java.util.Date.)) 1000)
(/ (.getTime (java.util.Date.)) 1000.0)
(int (/ (.getTime (java.util.Date.)) 1000.0))
(* 30 24 60 60)
(+ (* 30 24 60 60) (int (/ (.getTime (java.util.Date.)) 1000.0)))
(require 'mug.cli :reload)
(-main)
(.getTime (java.util.Date.))
(require 'mug.cli :reload)
(-main)
(.getTime (java.util.Date))
(.getTime (java.util.Date.))
(require 'mug.cli :reload)
(-main)
(.getTime (java.util.Date.))
(exit)
(-main)
(.getTime (java.util.Date.))
(type (.getTime (java.util.Date.)))
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(* 30 24 60 60 1000)
(.getTime (.java.util.Time))
(.getTime (.java.util.Time.))
(.getTime (.java.util.Date.))
(.getTime (java.util.Date.))
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(def q ".q")
(first q)
(second q)
(third q)
(count q)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
.w 30 40
(-main)
.w 30 40
(-main)
(deq q ['a 'b 'c 'd 'e])
(def q ['a 'b 'c 'd 'e])
q
(count q)
(def q [1 2 3 4 5])
q
(map #(+ % 1) q)
(doc doseq)
(doseq [i q] (println i))
(def f #(+ % 1))
q
f
(map f q)
(print \.)
(print \q)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
.q
(require 'mug.cli :reload)
(-main)
@*inventory*
(map first @*inventory*)
@*bag-buffer*
(require 'mug.cli :reload)
(-main)
(@*from*)
@*from*
(@*from* 'mrk)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(require 'mug.cli :reload)
(-main)
.m c
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
_
'_
.q
(-main)
(c 'mrk)
(c 'ba)
(dir mug.util)
(util/cash-flow+ 'mrk))
(util/cash-flow! 'mrk))
(util/cash-flow+ 'mrk)
(util/cash-flow! 'mrk)
(util/company! 'mrk)
(def base-url "https://cloud.iexapis.com/")
(def version "beta")
(def endpoint-path (str "/stock/" ticker "/company"))
(def endpoint-path (str "/stock/" 'MRK "/company"))
(def keychain (eval (read-string (slurp "resources/keychain.clj"))))
(def u (str base-url version endpoint-path query-string))
(def query-string (str "?token=" (:iexcloud keychain)))
(def u (str base-url version endpoint-path query-string))
u
(def m (try (client/get u {:cookie-policy :standard}) (catch Exception e 1)))
(require [clj-http.client :as client])
(require clj-http.client :as client)
(require 'clj-http.client :as client)
(require 'clj-http.client)
(def hm (try (clj-http.client/get u {:cookie-policy :standard}) (catch Exception e 1)))
hm
(exit)
(-main)
(c 'mrk)
(e 'mrk)
.l
(-main)
(exit)
(-main)
(exit)
(-main)
(exit)
(-main)
(zc 'seel)
(zc 'agrx)
(require 'mug.core :reload)
(zc 'agrx)
(zc 'novn)
(zc 'aqxp)
aqxp sec
(sec 'aqxp)
(-main)
(exit)
(-main)
(require mug.core :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(ceo 'mrk)
(ceoweb 'mrk)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(ceo 'mrk)
(ceoweb 'mrk)
(-main)
(exit)
(import 'jline.console ConsolReader)
(consolreader.)
(ConsoleReader.)
(def cr (ConsoleReader.))
cr
(.readCharacter cr)
(def q (.readCharacter cr))
q
(def q (.readCharacter cr))
q
(def q (.readCharacter cr))
q
(def q (.readCharacter cr))
[B
)
q
(def q (.readCharacter cr))
q
(def q (.readCharacter cr))
q
(-main)
.noisy
(-main)
@*bag-buffer*
(require 'mug.cli :reload)
@*inventory*
@*bag-buffer*
(-main)
@*bag-buffer*
@*inventory*
.m c
(bag)
@*inventory*
@*bag-buffer*
(type @*inventory*)
(require 'mug.cli :reload)
(type @*inventory*)
@*inventory*
(top)
@*inventory*
@*bag-buffer*
(keep-top 5)
(str '56 '000000)
(str '56 "000000")
(symbol (str '56 "000000"))
(require 'mug.cli :reload)
(top)
@*inventory*
(require 'mug.cli :reload)
(top)
@*inventory*
@*bag-buffer*
(bag)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
