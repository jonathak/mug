(mvs 'mrk)
(mvs 'ibm)
(mvs 'mmm)
(mvs 'phar)
(mvx 'mrk)
(w 100 200)
(mvs 'hook)
(mvx 'hook)
exit
(-main)
(max 5 6 4)
(cname 'casi)
(mvx 'casi)
exit
(mvx 'casi)
(source mvx)
(app/max-movements 'casi)
(source app/max-movements)
(app/max-movements 'casi)
(app/movements 'casi)
(->> (app/movements 'casi))
(->> (str/split (app/movements 'casi) #"\n"))
(->> (str/split (app/movements 'casi) #"\n") (map #(str/split % #"\t")))
(->> (str/split (app/movements 'mrk) #"\n") (map #(str/split % #"\t")))
(->> (str/split (app/movements 'mrk) #"\n"))
(require 'mug.app :reload)
(app/max-movements 'mrk)
(require 'mug.app :reload)
(app/max-movements 'mrk)
(require 'mug.app :reload)
(app/max-movements 'mrk)
(require 'mug.app :reload)
(app/max-movements 'mrk)
(require 'mug.app :reload)
(app/max-movements 'mrk)
(max (app/max-movements 'mrk))
(first (app/max-movements 'mrk))
(apply max (app/max-movements 'mrk))
(require 'mug.app :reload)
exit
(-main)
(exit)
(mov 'mrk)
(print (mov 'mrk))
(print (mov 'rnn))
(print (mov 'mgnt))
(print (mov 'bhvn))
(print (mvx 'bhvn))
(print (mvd 'bhvn))
(exit)
(cname 'bhvn)
(mkt 'bhvn)
(p 'bhvn)
(so 'bhvn)
(mkt 'bhvn)
(* (p 'bhvn) (so 'bhvn))
(mov 'bhvn)
(print (mov 'bhvn))
(print (mvs 'bhvn))
(print (mvx 'bhvn))
(print (mvd 'bhvn))
(require 'mug.app :reload)
(print (mvd 'bhvn))
(require 'mug.app :reload)
(print (mvd 'bhvn))
(mvd 'bhvn)
(-main)
(require 'mug.cli.bag :reload)
(-main)
.w 50 100
(-main)
(exit)
(mvx 'mrk)
(mvd 'mrk)
(cname 'allk)
(mvd 'allk)
(sec 'allk)
(mov 'allk)
.w 500 600
(-main)
(require 'mug.bioworld)
(require 'mug.bioworld :reload)
(mug.bioworld/getp)
(mug.bioworld)
(mug.bioworld.getp)
(bioworld/getp)
mug.bioworld/getp
(require 'mug.bioworld :reload)
(mug.bioworld/getp)
(require 'mug.bioworld :reload)
(mug.bioworld/getp)
(mov 'mrk)
(mvd 'mrk)
(require 'mug.bioworld :reload)
(mug.bioworld/getp)
(require 'mug.bioworld :reload)
(mug.bioworld/getp)
(require 'mug.bioworld :reload)
(mug.bioworld/getp)
(mug.bioworld/getp "Mon_Jun_24_2019")
(mvd 'mrk)
(mug.bioworld/getp (mvd 'mrk))
(require 'mug.bioworld :reload)
(mug.bioworld/getp (mvd 'mrk))
(require 'mug.bioworld :reload)
(mug.bioworld/getp (mvd 'mrk))
(mug.bioworld/getp (mvd 'allk))
(def q (mug.bioworld/getp (mvd 'allk)))
q
(str/split q #"<p>")
(count (str/split q #"<p>"))
(doc re-find)
(re-find #"ALLK" q)
(map #(re-find #"ALLK" %) q)
(map #(re-find % #"ALLK") q)
(count q)
(map #(re-find #"ALLK" %) q)
(map (fn [x] (re-find #"ALLK" x)) q)
(map (fn [x] (re-find #"ALLK" (str x))) q)
(count q)
(get q 1)
(get q 2)
(q 0)
(q 1)
(first q)
(second q)
(third q)
(first (second q))
(count q)
(def q (mug.bioworld/getp (mvd 'allk)))
q
(first q)
(count q)
q
(split q #"<p>")
(str/split q #"<p>")
(count (str/split q #"<p>"))
(def a (str/split q #"<p>"))
(first a)
(second a)
(a 1)
(a 2)
(re-find #"ALLK" (a 2))
(re-find #"ALLK" (a 1))
(map #(re-find #"ALLK" %) a)
(filter #(re-find #"ALLK" %) a)
(exit)
(-main)
(bioworld 'mrk)
(bw 'mrk)
(.contains "abc" "c")
(.contains "abc" "d")
(require 'mug.app :reload)
(bw 'mrk)
(require 'mug.app :reload)
(bw 'mrk)
(bw 'allk)
(require 'mug.app :reload)
(bw 'allk)
(str/split (bw 'allk) #"<p>")
(map #(.contains "ALLK") (str/split (bw 'allk) #"<p>"))
(str/split (bw 'allk) #"<p>")
(count (str/split (bw 'allk) #"<p>"))
(require 'mug.app :reload)
(bw 'allk)
(require 'mug.app :reload)
(bw 'allk)
((bw 'allk) 2)
(def q ((bw 'allk) 2))
q
(.contains q "ALLK")
(def t 'ALLK)
(.contains q t)
(.contains q (str t))
(require 'mug.app :reload)
(bw 'allk)
(require 'mug.app :reload)
(bw 'allk)
(util/tfmt 'allk)
(type (util/tfmt 'allk))
(require 'mug.app :reload)
(bw 'allk)
(bw 'advm)
(mvd 'advm)
(bioworld/getp 'advm)
(require 'mug.bioworld)
(bioworld/getp 'advm)
(mug.bioworld/getp 'advm)
(mvd 'advm)
(mug.bioworld/getp 'rttr)
(bw 'rttr)
(cname 'aimt)
(mkt 'aimt)
(bw 'aimt)
(bw 'toca)
(exit)
(-main)
.l
(exit)
(bw 'allk)
(bw 'arpo)
(bw 'axsm)
(cname 'axsm)
(require 'mug.app :reload)
(bw 'axsm)
(first (cname 'axsm))
(require 'mug.app :reload)
(bw 'axsm)
(bw 'derm)
(-main)
(require 'mug.app :reload)
(exit)
(-main)
(require 'mug.app :reload)
(-main)
(bw 'myov)
(require 'mug.app :reload)
(bw 'myov)
(mvd 'myov)
(require 'mug.app :reload)
(mvd 'myov)
(bw 'myov)
(require 'mug.app :reload)
(bw 'myov)
(require 'mug.app :reload)
(bw 'myov)
(require 'mug.app :reload)
(bw 'myov)
(require 'mug.app :reload)
(bw 'myov)
(require 'mug.app :reload)
(bw 'myov)
(require 'mug.app :reload)
(bw 'myov)
(count (bw 'myov))
(require 'mug.app :reload)
(bw 'myov)
(require 'mug.app :reload)
(bw 'myov)
(count (bw 'myov))
((bw 'myov) 7)
((bw 'myov) 6)
((bw 'myov) 5)
(bw 'myov)
(count (bw 'myov))
(require 'mug.app :reload)
(count (bw 'myov))
(str/index-of (bw 'myov) myov)
(str/index-of (bw 'myov) "myov")
(str/index-of (bw 'myov) "MYOV")
(str/index-of (bw 'myov) (first (cname 'myov)))
(str/index-of (bw 'myov) (first (cname 'myov)) 38)
(str/index-of (bw 'myov) (first (cname 'myov)) 39)
(str/index-of (bw 'myov) (first (cname 'myov)) 338)
(str/index-of "abcdefg" "c")
(str/index-of "abcdefg" "k")
(doc conj)
(require 'mug.util :reload)
(util/s-locations "asdfghjklzxcvbm,kjhgfsazcvbnhgsazxv" "a")
(require 'mug.util :reload)
(util/s-locations "asdfghjklzxcvbm,kjhgfsazcvbnhgsazxv" "a")
(require 'mug.util :reload)
(util/s-locations "asdfghjklzxcvbm,kjhgfsazcvbnhgsazxv" "a")
(require 'mug.util :reload)
(util/s-locations "asdfghjklzxcvbm,kjhgfsazcvbnhgsazxv" "a")
(require 'mug.util :reload)
(util/s-locations "asdfghjklzxcvbm,kjhgfsazcvbnhgsazxv" "a")
(let [b (atom [])] (swap! b (fn [x] (conj x 1))) @b)
(require 'mug.util :reload)
(util/s-locations "asdfghjklzxcvbm,kjhgfsazcvbnhgsazxv" "a")
(exit)
(-main)
(bw 'arpo)
(bw 'cara)
(bw 'itci)
(bw 'cara)
(bw 'itci)
(bw 'zfgn)
(def q "Zafgen Inc. (NASDAQ:ZFGN) were trading midday at $3.01, down $1.59, or 34 percent, as Wall Street learned of the suspension of IND filing efforts with ZGN-1258 for Prader-Willi syndrome. The company said preclinical muscle toxicity turned up in rats at four and six months. Such effects were absent from other animal species in long-term models, and the finding has not been observed in any of Zafgenâ€™s other MetAP2 inhibitors or clinical trials")
(count q)
(require 'mug.core :reload)
(bw 'zfgn)
(require 'mug.core :reload)
(bw 'zfgn)
(require 'mug.core :reload)
(bw 'zfgn)
(bw 'ntec)
(bw 'glyc)
(cname 'glyc)
(require 'mug.util :reload)
(cname 'glyc)
(bw 'glyc)
(exit)
(bw 'glyc)
(bw 'svra)
(bw 'sybx)
(-main)
(exit)
(-main)
(sp 'mlnt)
(mov 'mlnt)
(sp 'mrk)
(sp 'mlnt)
(require 'mug.app :reload)
(sp 'mlnt)
(mov 'mlnt)
(subs (sp 'mlnt) 0 3)
(require 'mug.app :reload)
(mov 'mlnt)
(subs (sp 'mlnt) 0 4)
(= (subs (sp 'mlnt) 0 4) "2019")
(require 'mug.app :reload)
(mov 'mlnt)
(app/movements 'mlnt)
(app/movements 'cdrx)
(app/movements 'mlnt)
(require 'mug.app :reload)
(app/movements 'mlnt)
(require 'mug.app :reload)
(app/movements 'mlnt)
(source mov)
(mov 'mlnt)
(exit)
(-main)
(bw 'mlnt)
(bw 'idrx)
(bw 'arpo)
(bw 'phas)
(cname 'phas)
(bw 'mlnt)
(bw 'arpo)
(exit)
(bw 'arpo)
(bw 'mlnt)
(sec 'mlnt)
(oweb 'mlnt)
(so 'mlnt)
(exit)
(bw 'mlnt)
(bw 'arpo)
(bw 'cdtx)
(pr 'cdtx)
(prices 'cdtx)
(so 'cdtx)
(cname 'alny)
(cname 'alxn)
(cname 'incy)
(mvd 'incy)
(bw 'incy)
(mov 'incy)
(sec 'incy)
(prices 'incy)
(exit)
(-main)
(bw 'ruby)
(source bw)
(bw 'ruby)
(exit)
(-main)
(exit)
(-main)
dir
top
(top)
exit
doc
(doc)
help
h
dir
(dir)
(dir clojure.repl)
(top)
.q
pwd
.q
pwd
(verbose)
(iex/verbose)
(iex/concise)
(iex/verbose)
(*universe*)
(@*universe*)
*universe*
@*universe*
.cl
(iex/biomktcapsorted)
(universe/show-universe)
(cli/show-universe)
(mug/cli/show-universe)
(mug.cli/show-universe)
ls
(def q slurp "pharma20200724")
(def q (slurp "pharma20200724"))
(def q (slurp "pharma20200724.txt"))
(def q (slurp "resources/pharma20200724.txt"))
q
(map (fn [_] '5') q)
(map (fn [_] '5') q))
(map #('5') q)
q
(split q)
(split q "\n")
(string/split q "\n")
(str/split q "\n")
(str/split "\n" q)
(str/split #"\n" q)
(str/split q #"\n")
(count (str/split q #"\n"))
(def qq (str/split q #"\n"))
qq
(doseq [x qq] (pr x))
q
qq
(mkt "ABEO")
(def tickers qq)
(dir)
(dir mug.cli)
(doc tickers)
tickers
(def x [1 2 3])
x
(subvec x 0 1)
(subvec x 2 1)
(subvec x 1 1)
(subvec x 0 1)
(subvec x 0 2)
(subvec x 0 3)
(subvec x 0 4)
(subvec x 0 3)
(subvec x 1 3)
(subvec tickers 1 3)
(subvec tickers 0 3)
(subvec tickers 0 10)
(def fart (subvec tickers 0 10))
fart
(defn booger(x) [x,(mkt x)])
(defn booger [x] [x,(mkt x)])
(map booger fart)
(def poop (map booger fart))
poop
(def thejuice (map booger tickers))
thejuice
(str 45)
(def crap (fn [[x y]] [x str(y)])
)
crap
(doc crap)
(source crap)
(crap ["k" 9])
(defn crap [[x y]] [x (str y)])
(crap ['a' 1])
(crap ['a 1])
(crap ["a" 1])
(str "p" "o")
(defn crap [[x y]] (str x y))
(crap ["a" 1])
(defn crap [[x y]] (str x " " y))
(crap ["a" 1])
(defn crap [[x y]] (str x " " y "\n"))
(crap ["a" 1])
(def coffee (map crap thejuice))
coffee
(reduce str coffee)
(jug (reduce str coffee))
(def jug (reduce str coffee))
jug
(spit "newstuff.txt jug)
)
jug
(type jug)
(spit "fart.txt" jug)
exit
all
(all)
@all
all
(biomktcapsorted)
biomktcapsorted
exit
(iex/biomktcapsorted)
exit
(mug.fixtures/biomktcaps)
exit
(iex/biomktcaps)
(iex/biomktcapsorted)
(all)
(w 100 200)
(w 100 2000)
(w 100 20000)
(app/window 100 200)
(all)
(def data (all))
data
(iex/highpass data 200)
exit
(all)
(w 200 300)
dir mug.cli
exit
