(-main)
(exit)
(-main)
(exit)
(-main)
(dir mug.core)
(doc sl)
(source sl)
(source app/sl)
(exit)
(sl 'eagle)
(cname 'exp)
(sl "eagle pharma")
(sl "eagle pharmaceutical")
(cname 'egrx)
(-main)
(require 'mug.cli :reload)
.g
(-main)
(exit)
(-main)
.b mrk
(-main)
(require 'mug.cli :reload)
(map mug.core/t? '(mrk ibm))
(map mug.core/t? '("mrk" "ibm"))
(and (map mug.core/t? '("mrk" "ibm")))
(and ~@(map mug.core/t? '("mrk" "ibm")))
(map mug.core/t? '("mrk" "ibm"))
(reduce and (map mug.core/t? '("mrk" "ibm")))
(map mug.core/t? '("mrk" "ibm"))
(require 'mug.cli :reload)
(check-all-true '(true true))
(check-all-true '(true false))
(require 'mug.cli :reload)
(check-all-true '(true false))
(check-all-true '(true true))
(source check-all-true)
((fn [x & y] y) '(mrk ibm))
((fn [x & y] x) '(mrk ibm))
((fn [(x & y)] x) '(mrk ibm))
((fn [[x & y]] x) '(mrk ibm))
((fn [[x & y]] y) '(mrk ibm))
(require 'mug.cli :reload)
(source check-all-true)
(check-all-true '(true true))
(require 'mug.cli :reload)
(check-all-true '(true true))
(require 'mug.cli :reload)
(check-all-true '(true true))
(require 'mug.cli :reload)
(check-all-true '(true true))
((fn [[x & y]] y) '(true false))
(check-all-true '(true true))
(first '())
(require 'mug.cli :reload)
(check-all-true '(true true))
(check-all-true '(true false))
(check-all-true '(true false true))
(check-all-true '(true true false true))
(check-all-true '(true true true))
(require 'mug.cli :reload)
(check-all-true '(true true true))
(check-all-true '(true true false))
.b mrk ibm
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(w 50 55)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(cname nhy)
(t? 'mrk)
(map t? '("mrk" "ibm"))
(map t? '("mrk" "ibm" "jhgj"))
(require 'mug.util :reload)
(map t? '("mrk" "ibm" "jhgj"))
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(map t? '("mrk" "ibm" "jhgj"))
(require 'mug.util :reload)
(require 'mug.app :reload)
(require 'mug.core :reload)
(require 'mug.cli :reload)
(doc list-of-booleans)
(doc check-all-true)
(source check-all-true)
(check-all-true '())
(check-all-true '(true))
(check-all-true '(true false))
(check-all-true '(true false true))
(check-all-true '(false true))
(check-all-true '(false))
(check-all-true '(false true))
(-main)
.b mrk ibm msft
(-main)
(require 'mug.cli :reload)
(-main)
.b mrk bin hd
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(exit)
(-main)
(exit)
(-main)
(require 'mug.cli :reload)
(-main)
(conj [5 6] [8 9])
(cons [5 6] [8 9])
(concat [5 6] [8 9])
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(require 'mug.cli :reload)
(-main)
(exit
)
(exit)
(source mov)
(mov 'mrk)
(app/movements 'mrk)
(def b "1D?")
b
(def gulp (slurp (str "resources//" (str/upper-case t) "_g_" b ".p")))
(def gulp (slurp (str "resources//" (str/upper-case 'mrk) "_g_1D?.p")))
gulp
(def fl   (fn [s] (-> s (str/split #" "))))
(def fngm (fn [s] (->> (fl s) (last) (read-string) ((fn [x] (if (< x 0) (- 0 x) x))))))
(str/split gulp #"\n")
(sort-by fngm (str/split gulp #"\n"))
(take 5 (sort-by fngm (str/split gulp #"\n")))
(take 5 (reverse (sort-by fngm (str/split gulp #"\n"))))
(exit)
(-main)
(exit)
(require 'mug.app :reload)
(ngm 'rnn)
(def q (ngm 'rnn))
(count q)
(type q)
(def q (ngm 'rnn))
q
(map (fn [s] (let [l (str/split s #" ")] (/ (second l) (first l)))))
(into [] (map (fn [s] (let [l (str/split s #" ")] (/ (second l) (first l))))))
(require 'mug.app :reload)
(def q (ngm 'rnn))
q
(def q (ngm 'rnn))
q
(/ 2 1.9804)
(/ 391.7373257927692 1.9804)
(require 'mug.app :reload)
(def q (ngm 'rnn))
(/ 777.777 2)
(type (read-string "2"))
(require 'mug.app :reload)
(def q (ngm 'rnn))
q
(mov 'rnn)
(exit)
(-main)
(exit)
